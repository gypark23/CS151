#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 108 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 67 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 157 157 250
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 140 212 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 152 251 152
0 0 0 -1 -1           0 2504 0 28 3 18 #"#lang typed/racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"../include/cs151-core.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 30 #"typed/test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"../include/cs151-image.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"../include/BST.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Homework 5"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Kyu Park"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; 12198215"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 2 #" ("
0 0 14 3 3 #"BST"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 4 #"lte?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"bst"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"left-child"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 11 #"right-child"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"BST"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #" ("
0 0 14 3 3 #"BST"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 21 3 2 #"46"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 2 #" ("
0 0 14 3 4 #"Node"
0 0 24 3 1 #" "
0 0 21 3 2 #"66"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; a)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"third-moment"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"third-moment"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"length"
0 0 19 3 2 #" 0"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Real"
0 0 24 3 4 #"]) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; b)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"power-set"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"power-set"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 4 #"temp"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 5 #")]) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 2 #") "
0 0 14 3 4 #"temp"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"power-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"power-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 10 #"Hemisphere"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 9 #"longitude"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"east"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"west"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"latitude"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"south"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"north"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;a"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 19 #"country->hemisphere"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"country->hemisphere"
0 0 24 3 1 #" "
0 0 14 3 7 #"country"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 7 #"country"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 19 3 1 #"\""
0 0 19 3 6 #"United"
0 0 19 3 7 #" States"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"west"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"north"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 19 3 6 #"\"China"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"east"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"north"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 19 3 1 #"\""
0 0 19 3 5 #"South"
0 0 19 3 7 #" Africa"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"west"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"south"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 19 3 1 #"\""
0 0 19 3 6 #"Japan\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"east"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"north"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"same-hemisphere?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 6 #"String"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"same-hemisphere?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 19 #"country->hemisphere"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-long"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lat"
0 0 24 3 3 #") ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 19 #"country->hemisphere"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                 [("
0 0 14 3 10 #"Hemisphere"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-long"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lat"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-long"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-long"
0 0 24 3 3 #") ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-lat"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lat"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 6 #")])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"Phil"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 10 #"days-alive"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"past-life"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 14 3 4 #"Phil"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"rebirth"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Phil"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Phil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rebirth"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"Phil"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; c"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 16 #"total-days-alive"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Phil"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"total-days-alive"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Phil-past-life"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Phil-days-alive"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"Phil"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Phil-days-alive"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 3 #") ("
0 0 14 3 16 #"total-days-alive"
0 0 24 3 2 #" ("
0 0 14 3 14 #"Phil-past-life"
0 0 24 3 1 #" "
0 0 14 3 4 #"phil"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 5"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"Base"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 4 #"Base"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; a"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 20 #"complementary-bases?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Base"
0 0 24 3 1 #" "
0 0 14 3 4 #"Base"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"complementary-bases?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 14 #"complementary?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"complementary?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 20 #"complementary-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"complementary-helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 20 #"complementary-bases?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 4 #")) ("
0 0 14 3 20 #"complementary-helper"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 5 #")]))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"complementary-helper"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; c"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"cross-over!"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cross-over!"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 3 #"two"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"swap"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"swap"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Base"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 4 #"temp"
0 0 24 3 5 #"))))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 14 3 3 #"two"
0 0 24 3 3 #") ("
0 0 14 3 4 #"swap"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"swap"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 3 #") ("
0 0 14 3 11 #"cross-over!"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 2 #") "
0 0 14 3 3 #"two"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"abc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"abc"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"DNA"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 3 #"def"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"G"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; problem 6"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"my-map"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"All"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"my-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"my-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"and-map"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 3 #"All"
0 0 24 3 2 #" ("
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"and-map"
0 0 24 3 1 #" "
0 0 14 3 2 #"f?"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"f?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"and-map"
0 0 24 3 1 #" "
0 0 14 3 2 #"f?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; problem 7"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Color"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"Loc"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"col"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Piece"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Loc"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 6 #"pieces"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Piece"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"turn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"clicked-piece"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 1 #"U"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 14 3 5 #"Piece"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; a"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"change-turn"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"change-turn"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #" "
0 0 14 3 6 #"pieces"
0 0 24 3 1 #" "
0 0 14 3 4 #"turn"
0 0 24 3 1 #" "
0 0 14 3 13 #"clicked-piece"
0 0 24 3 3 #") ("
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #" "
0 0 14 3 6 #"pieces"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"turn"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #") "
0 0 14 3 13 #"clicked-piece"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 17 #"two-squares-away?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #" "
0 0 14 3 3 #"Loc"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"two-squares-away?"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"Checkers"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Piece"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 8 #"location"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Loc-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"location"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Loc-row"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Loc-row"
0 0 24 3 1 #" "
0 0 14 3 8 #"location"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Loc-row"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Loc-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"location"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Loc-col"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Loc-col"
0 0 24 3 1 #" "
0 0 14 3 8 #"location"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"Loc-col"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; problem 8"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"adj"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"degree"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"degree"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-nbrs"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"all-vtxs"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"all-vtxs"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Graph-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 3 #"]) "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    {"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"reachable"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"reachable"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 2 #" ("
0 0 14 3 7 #"Graph-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dfs!"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 9 #"reachable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"andmap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 3 #"]) "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 9 #"reachable"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"dfs!"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Vectorof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; initially, reachable should be all false"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dfs!"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 7 #"visited"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"visited"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      {"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"explore-list!"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 2 #") "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 4 #"Void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"explore-list!"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"void"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"visited"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"dfs!"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 2 #") "
0 0 14 3 7 #"visited"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 13 #"explore-list!"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"nbrs"
0 0 24 3 8 #")) )]))}"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"explore-list!"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-nbrs"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"get-nbrs"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-nbrs"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Graph-adj"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; a"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"cycle"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"cycle"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; b"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"cycle?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Graph"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cycle?"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #") ("
0 0 14 3 6 #"andmap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 3 #"ver"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Vertex"
0 0 24 3 4 #"]) ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"degree"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #" "
0 0 14 3 3 #"ver"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"all-vtxs"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; c"
0 0 24 29 1 #"\n"
0 9         625 21           0 0           0 103 0 24 3 1 #" "
0 0 14 3 7 #"runtime"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"+1"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 3 #"m+n"
0 0 24 3 2 #") "
0 0 14 3 10 #"connected?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 6 #"andmap"
0 0 24 3 2 #" ("
0 0 14 3 7 #"repeats"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"times"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 29 1 #"\n"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 3 #"m+n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 6 #"nm+n^2"
0 0 24 3 2 #") "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 6 #"nm+n^2"
0 0 24 3 2 #") "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 4 #"most"
0 0 24 3 1 #" "
0 0 14 3 8 #"dominant"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 15 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"cycle"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"n=m"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 4 #"2n^2"
0 0 24 3 1 #")"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 9 #"therefore"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 3 #"n^2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 3 #"The"
0 0 24 3 1 #" "
0 0 14 3 7 #"runtime"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 1 #"O"
0 0 24 3 1 #"("
0 0 14 3 3 #"n^2"
0 0 24 3 1 #")"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; problem 12"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 11 #"count-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 96
(4
 #";; counts how many ways are there to cover a floor ofsize 2\303\227n"
 #" with tiles of size 2\303\2272 and 1\303\2272."
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";; n must be a nonnegative integer"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-tiles"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-tiles"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; problem 13"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; a)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"anagrams?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"anagrams?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 9 #"int->list"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int->list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 6 #")))))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"<"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 9 #"int->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 1 #"<"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; b)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 13 #"count-perfect"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"count-perfect"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    {("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"factors-of-n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"factors-of-n"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 10 #"build-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"perfect?"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 7 #"Boolean"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"perfect?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 12 #"factors-of-n"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 12 #"factors-of-n"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")) "
0 0 14 3 3 #"num"
0 0 24 3 4 #")))}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 8 #"perfect?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"Integer"
0 0 24 3 4 #"]) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0           0
